#include "globals.h"
#include "mainwindow.h"
#include "simpletimer.h"

#include <QDesktopWidget>
#include <QInputDialog>

MainWindow::MainWindow(const QString &windowTitle, QWidget *parent) : QMainWindow(parent), ui(new Ui::MainWindow) {
    THE_WINDOW_ID++;
    ui->setupUi(this);  // setup user interface from "mainwindow.ui" file (corresponding "ui_mainwindow.h" file is generated by the user interface compiler (uic))
    myTimer = new SimpleTimer(ui, this); // create a "simple timer", which does the timing work

    myTrayMenu = new QMenu();
    myTrayMenu->addAction(windowTitle)->setDisabled(true); // create the first (disabled) action as a label with the default window title
    myTrayMenu->addSeparator();
    myTrayMenu->addAction(tr("Restore timer"), this, &MainWindow::showNormal);
    myTrayMenu->addAction(tr("Close timer"), this, &MainWindow::close);

    myTray = new QSystemTrayIcon(*THE_ICON); // create a QSystemTrayIcon, which will be shown when the window is minimized
    myTray->setContextMenu(myTrayMenu);

    connect(myTray, &QSystemTrayIcon::activated, this, &MainWindow::tray_clicked); // show menu on (right) click
    connect(ui->pushButton, &QPushButton::clicked, this, &MainWindow::pushButton_clicked);
    connect(ui->pushButton_2, &QPushButton::clicked, this, &MainWindow::pushButton_2_clicked);
    connect(ui->lineEdit, &QLineEdit::textChanged, this, &MainWindow::lineEdit_textEdited);

    this->setWindowTitle(windowTitle);
    this->setGeometry(QStyle::alignedRect(Qt::LeftToRight, Qt::AlignCenter, this->size(), qApp->desktop()->availableGeometry())); // position window on screen center (https://wiki.qt.io/How_to_Center_a_Window_on_the_Screen)
    this->setWindowIcon(*THE_ICON); // main icon displayed on top left of main window
    this->setAttribute(Qt::WA_DeleteOnClose, true); // make sure windows get deleted when they are closed
}

MainWindow::~MainWindow() {
    delete myTray;
    delete myTrayMenu;
    delete myTimer;
    delete ui;
}

void MainWindow::tray_clicked(QSystemTrayIcon::ActivationReason reason) const {
    // allow only right-click
    if(reason == QSystemTrayIcon::Context) {
        myTray->show();
    }
}

void MainWindow::pushButton_clicked() const {
    myTimer->startStopTimer();
}

void MainWindow::lineEdit_textEdited(const QString &arg1) const {
    ui->pushButton->setEnabled(arg1.length() > 0); // disable pushbutton if user input is empty
}

void MainWindow::closeEvent(QCloseEvent *) {
    isClosed = true; // detect when window is being closed (and not just hidden)
    myTray->hide(); // force the tray icon to close when window is closed
}

void MainWindow::hideEvent(QHideEvent *) {
    if(!isClosed) {
        myTray->show();
        this->hide();
    }
}

void MainWindow::showEvent(QShowEvent *) {
    myTray->hide();
    this->show();
}

void MainWindow::pushButton_2_clicked() const {
    QString tempWindowTitle = tr("Little Timer ") + QString::number(THE_WINDOW_ID);

    if(QGuiApplication::keyboardModifiers() && Qt::ShiftModifier) {
        QInputDialog dialog;
        dialog.setWindowTitle(tr("Custom Name"));
        dialog.setLabelText(tr("Set the name of the new timer:"));
        dialog.setTextValue(tempWindowTitle);
        dialog.setWindowIcon(*THE_ICON);

        if(dialog.exec() == QDialog::Accepted) {
            tempWindowTitle = dialog.textValue();
        } else {
            return;
        }
    }

    MainWindow *w = new MainWindow(tempWindowTitle); // create a new timer window
    w->show();
}
