#include "globals.h"
#include "mainwindow.h"

#include <QDesktopWidget>
#include <QCloseEvent>
#include <QHideEvent>
#include <QShowEvent>
#include <QInputDialog>
#include <QMenu>

#include <iostream>

MainWindow::MainWindow(QWidget *parent) : QMainWindow(parent), ui(new Ui::MainWindow) {
    ID = THE_WINDOWPOINTER_VECTOR->size(); // assign a new ID (starting with 0, which is the "size()" at creation time)
    ui->setupUi(this);  // setup user interface from "mainwindow.ui" file (corresponding "ui_mainwindow.h" file is generated by the user interface compiler (uic))
    myTimer = new SimpleTimer(*ui, *this); // create a "simple timer", which does the timing work

    myTrayMenu = new QMenu("Menu Title");
    myTrayMenu->addAction("Restore", this, SLOT(showNormal()));
    myTrayMenu->addAction("Close", this, SLOT(close()));

    myTray = new QSystemTrayIcon(*THE_ICON); // create a seperate QSystemTrayIcon, which will be shown if the window is minimized
    myTray->setContextMenu(myTrayMenu);
    connect(myTray, SIGNAL(activated(QSystemTrayIcon::ActivationReason)), myTrayMenu, SLOT(show()));
    myTray->show();
}

MainWindow::~MainWindow() {
    delete myTray;
    delete myTrayMenu;
    delete myTimer;
    delete ui;
}

void MainWindow::on_pushButton_clicked() const {
    myTimer->startStopTimer();
}

void MainWindow::on_lineEdit_textEdited(const QString &arg1) const {
    ui->pushButton->setEnabled(arg1.length() > 0); // disable pushbutton if user input is empty
}

void MainWindow::closeEvent(QCloseEvent *event) {
    MainWindow *tempPointer = THE_WINDOWPOINTER_VECTOR->at(ID); // make a temp variable of the (to be destroyed) window pointer
    THE_WINDOWPOINTER_VECTOR->remove(ID); // delete the entry in the list

    // adjust all subsequent IDs by subtracting 1 from them (because we removed one)
    for(int i = ID; i < THE_WINDOWPOINTER_VECTOR->size(); i++) {
        THE_WINDOWPOINTER_VECTOR->at(i)->ID -= 1;
    }

    delete tempPointer;
    event->accept();
}

void MainWindow::hideEvent(QHideEvent *event) {
    std::cout << event->type() << std::endl;
    myTray->show();
    event->accept();
}

void MainWindow::showEvent(QShowEvent *event) {
    myTray->hide();
    event->accept();
}

void MainWindow::on_pushButton_2_clicked() const {
    QString tempWindowTitle = tr("Little Timer ") + QString::number(THE_WINDOWPOINTER_VECTOR->size());

    if(QGuiApplication::keyboardModifiers() && Qt::ShiftModifier) {
        QInputDialog dialog;
        dialog.setWindowTitle(tr("Custom name"));
        dialog.setLabelText(tr("Set the name of the new timer:"));
        dialog.setTextValue(tempWindowTitle);
        dialog.setWindowIcon(*THE_ICON);

        if(dialog.exec() == QDialog::Accepted) {
            tempWindowTitle = dialog.textValue();
        } else {
            return;
        }
    }

    MainWindow *w = new MainWindow(); // create a new timer window

    w->setWindowTitle(tempWindowTitle);
    THE_WINDOWPOINTER_VECTOR->append(w); // add the newly created window to our list
    w->setGeometry(QStyle::alignedRect(Qt::LeftToRight, Qt::AlignCenter, w->size(), qApp->desktop()->availableGeometry())); // position window on screen center (https://wiki.qt.io/How_to_Center_a_Window_on_the_Screen)
    w->setWindowIcon(*THE_ICON); // main icon displayed on top left of main window
    w->show();
}
